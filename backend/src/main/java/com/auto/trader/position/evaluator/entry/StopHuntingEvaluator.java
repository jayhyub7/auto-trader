package com.auto.trader.position.evaluator.entry;

import java.util.List;

import com.auto.trader.position.entity.IndicatorCondition;
import com.auto.trader.position.enums.Direction;
import com.auto.trader.scheduler.SchedulerLogManager;
import com.auto.trader.trade.dto.CandleDto;
import com.auto.trader.trade.indicator.IndicatorCache;
import com.auto.trader.trade.indicator.IndicatorMemoryStore;
import com.auto.trader.trade.indicator.IndicatorUtil;

public class StopHuntingEvaluator implements EntryConditionEvaluator {

	private static final int MIN_CANDLES = 50;
	private static final double MAX_WICK_RATIO = 4.0;

	@Override
	public boolean evaluate(IndicatorCondition cond, IndicatorCache _cache, Direction direction,
			SchedulerLogManager log) {

		String key = "BTCUSDT_15m";
		IndicatorCache cache = IndicatorMemoryStore.get(key);
		List<CandleDto> candles = cache.getCandles();

		if (candles == null || candles.size() < MIN_CANDLES) {
			log.log("‚ö†Ô∏è Ï∫îÎì§ Ïàò Î∂ÄÏ°±: {}", candles != null ? candles.size() : 0);
			return false;
		}

		CandleDto wickCandle = candles.get(candles.size() - 2);
		CandleDto confirmCandle = candles.get(candles.size() - 1);

		double recentHigh = candles
			.subList(candles.size() - MIN_CANDLES, candles.size())
			.stream()
			.mapToDouble(CandleDto::getHigh)
			.max()
			.orElse(Double.NaN);
		double recentLow = candles
			.subList(candles.size() - MIN_CANDLES, candles.size())
			.stream()
			.mapToDouble(CandleDto::getLow)
			.min()
			.orElse(Double.NaN);

		log.log("üìä Í∏∞Ï§Ä Í≥†Ï†ê: {}, Ï†ÄÏ†ê: {}", (int) recentHigh, (int) recentLow);
		log
			.log("üìå wickCandle ÏãúÏ†ê: {}, high: {}, low: {}", IndicatorUtil.toKST(wickCandle.getTime()),
					wickCandle.getHigh(), wickCandle.getLow());

		boolean stopTriggered = false;
		if (direction == Direction.SHORT && wickCandle.getHigh() >= recentHigh) {
			stopTriggered = true;
		} else if (direction == Direction.LONG && wickCandle.getLow() <= recentLow) {
			stopTriggered = true;
		}

		if (!stopTriggered) {
			log.log("‚ùå Í≥†/Ï†ÄÏ†ê ÎèåÌåå ÏïàÎê® ‚Üí Ïä§ÌÉëÌóåÌåÖ Ï°∞Í±¥ Î∂àÏ∂©Ï°±");
			return false;
		}

		double body = Math.abs(wickCandle.getClose() - wickCandle.getOpen());
		if (body < 1e-8) {
			log.log("‚ùå body=0 ÎèÑÏßÄÌòï ‚Üí Ï†úÏô∏");
			return false;
		}

		double upperWick = wickCandle.getHigh() - Math.max(wickCandle.getClose(), wickCandle.getOpen());
		double lowerWick = Math.min(wickCandle.getClose(), wickCandle.getOpen()) - wickCandle.getLow();

		if (direction == Direction.SHORT && upperWick > body * MAX_WICK_RATIO) {
			log.log("‚ùå ÏúóÍº¨Î¶¨ ÎπÑÏú® Í≥ºÎã§ (upperWick: {}, body: {}, ÎπÑÏú®: {:.2f})", (int) upperWick, (int) body, upperWick / body);
			return false;
		}
		if (direction == Direction.LONG && lowerWick > body * MAX_WICK_RATIO) {
			log
				.log("‚ùå ÏïÑÎû´Íº¨Î¶¨ ÎπÑÏú® Í≥ºÎã§ (lowerWick: {}, body: {}, ÎπÑÏú®: {:.2f})", (int) lowerWick, (int) body,
						lowerWick / body);
			return false;
		}

		boolean reverted = false;
		if (direction == Direction.SHORT) {
			if (confirmCandle.getClose() < wickCandle.getOpen()) {
				reverted = true;
			} else {
				log
					.log("‚ùå ÎêòÎèåÎ¶º Ïã§Ìå® (SHORT) ‚Üí confirm Ï¢ÖÍ∞Ä({}) >= wick ÏãúÍ∞Ä({})", confirmCandle.getClose(),
							wickCandle.getOpen());
			}
		} else if (direction == Direction.LONG) {
			if (confirmCandle.getClose() > wickCandle.getOpen()) {
				reverted = true;
			} else {
				log
					.log("‚ùå ÎêòÎèåÎ¶º Ïã§Ìå® (LONG) ‚Üí confirm Ï¢ÖÍ∞Ä({}) <= wick ÏãúÍ∞Ä({})", confirmCandle.getClose(),
							wickCandle.getOpen());
			}
		}

		if (!reverted) {
			log.log("‚ùå ÎêòÎèåÎ¶º Ï∫îÎì§ ÏïÑÎãò ‚Üí ÏßÑÏûÖ Î∂àÍ∞Ä");
			return false;
		}

		log.log("‚úÖ Ïä§ÌÉëÌóåÌåÖ ÏßÑÏûÖ Ï°∞Í±¥ Ï∂©Ï°± (Íº¨Î¶¨ + Î≥µÍ∑Ä ÌôïÏù∏)");
		return true;
	}
}
